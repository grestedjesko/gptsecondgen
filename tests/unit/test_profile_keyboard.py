import pytest
from bot.keyboards.keyboards import Keyboard


class TestProfileKeyboard:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    
    def test_profile_menu_with_subs(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        keyboard = Keyboard(support_link="https://t.me/support", webapp_url="https://app.example.com")
        
        # –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        markup = keyboard.profile_menu(has_subs=True, trial_used=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
        assert any(btn.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        assert any(btn.text == 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        assert any(btn.text == 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' for btn in markup.inline_keyboard[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        assert any(btn.text == '–ù–∞–∑–∞–¥' for btn in markup.inline_keyboard[2])
    
    def test_profile_menu_without_subs_trial_used(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç—Ä–∏–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)"""
        keyboard = Keyboard(support_link="https://t.me/support", webapp_url="https://app.example.com")
        
        # –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, —Ç—Ä–∏–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        markup = keyboard.profile_menu(has_subs=False, trial_used=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        assert any(btn.text == 'üî• –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        assert not any(btn.text == 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' for btn in markup.inline_keyboard[0])
    
    def test_profile_menu_without_subs_trial_not_used(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç—Ä–∏–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)"""
        keyboard = Keyboard(support_link="https://t.me/support", webapp_url="https://app.example.com")
        
        # –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, —Ç—Ä–∏–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        markup = keyboard.profile_menu(has_subs=False, trial_used=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —Ç—Ä–∏–∞–ª–∞
        assert any(btn.text == 'üî• 3 –¥–Ω—è –∑–∞ 1 —Ä—É–±–ª—å' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        assert not any(btn.text == 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' for btn in markup.inline_keyboard[0])
    
    def test_subs_extend_keyboard(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = Keyboard(support_link="https://t.me/support", webapp_url="https://app.example.com")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
        class MockSub:
            def __init__(self, id, name):
                self.id = id
                self.name = name
        
        available_subs = [
            MockSub(1, "–ë–∞–∑–æ–≤—ã–π"),
            MockSub(2, "–ü—Ä–µ–º–∏—É–º")
        ]
        
        markup = keyboard.subs_extend_keyboard(available_subs=available_subs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        assert any(btn.text == '–ë–∞–∑–æ–≤—ã–π' for btn in markup.inline_keyboard[0])
        assert any(btn.text == '–ü—Ä–µ–º–∏—É–º' for btn in markup.inline_keyboard[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ–¥–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
        back_btn = next(btn for btn in markup.inline_keyboard[2] if btn.text == '–ù–∞–∑–∞–¥')
        assert back_btn.callback_data == 'profile'

