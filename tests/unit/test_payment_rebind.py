import pytest
from unittest.mock import Mock, AsyncMock
from bot.keyboards.keyboards import Keyboard


class TestSubscriptionRenewal:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    def test_subs_settings_keyboard_with_renewal_disabled(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º"""
        keyboard = Keyboard(support_link="https://t.me/support", webapp_url="https://app.example.com")
        
        # –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
        markup = keyboard.subs_settings_keyboard(will_renew=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        assert any(btn.text == 'üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        assert not any(btn.text == '‚èπ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        assert any(btn.text == '–ù–∞–∑–∞–¥' for btn in markup.inline_keyboard[1])
    
    def test_subs_settings_keyboard_with_renewal_enabled(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º"""
        keyboard = Keyboard(support_link="https://t.me/support", webapp_url="https://app.example.com")
        
        # –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
        markup = keyboard.subs_settings_keyboard(will_renew=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        assert any(btn.text == '‚èπ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        assert not any(btn.text == 'üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' for btn in markup.inline_keyboard[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        assert any(btn.text == '–ù–∞–∑–∞–¥' for btn in markup.inline_keyboard[1])
    
    
    def test_payment_rebind_keyboard(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = Keyboard(support_link="https://t.me/support", webapp_url="https://app.example.com")
        
        test_link = "https://yookassa.ru/pay/test_link"
        markup = keyboard.payment_rebind_keyboard(link=test_link)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
        pay_btn = next(btn for btn in markup.inline_keyboard[0] if btn.text == 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 —Ä—É–±–ª—å')
        assert pay_btn.url == test_link
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        back_btn = next(btn for btn in markup.inline_keyboard[1] if btn.text == '–ù–∞–∑–∞–¥')
        assert back_btn.callback_data == 'settings_subs'
    
    def test_invoice_reason_enum(self):
        """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏—á–∏–Ω—ã —Å—á–µ—Ç–∞"""
        from app.db.models.invoice import InvoiceReason
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assert hasattr(InvoiceReason, 'PAYMENT_METHOD_REBIND')
        assert InvoiceReason.PAYMENT_METHOD_REBIND.value == "payment_method_rebind"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        expected_values = ["initial", "renewal", "payment_method_rebind"]
        actual_values = [reason.value for reason in InvoiceReason]
        assert set(expected_values) == set(actual_values)
