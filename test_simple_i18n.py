#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
"""

from config.i18n import get_text, get_user_language, Language
from aiogram.types import User


def test_language_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    print("=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ru_user = User(id=1, is_bot=False, first_name="Test", language_code="ru")
    en_user = User(id=2, is_bot=False, first_name="Test", language_code="en")
    uk_user = User(id=3, is_bot=False, first_name="Test", language_code="uk")  # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π
    fr_user = User(id=4, is_bot=False, first_name="Test", language_code="fr")  # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    unknown_user = User(id=5, is_bot=False, first_name="Test", language_code="zh")  # –ö–∏—Ç–∞–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    none_user = User(id=6, is_bot=False, first_name="Test", language_code=None)  # None -> —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    assert get_user_language(ru_user) == Language.RU
    assert get_user_language(en_user) == Language.EN
    assert get_user_language(uk_user) == Language.RU  # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π
    assert get_user_language(fr_user) == Language.EN  # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    assert get_user_language(unknown_user) == Language.RU  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π -> —Ä—É—Å—Å–∫–∏–π
    assert get_user_language(none_user) == Language.RU  # None -> —Ä—É—Å—Å–∫–∏–π
    
    print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_text_retrieval():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ru_user = User(id=1, is_bot=False, first_name="Test", language_code="ru")
    en_user = User(id=2, is_bot=False, first_name="Test", language_code="en")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    ru_text = get_text("btn_select_ai", ru_user)
    en_text = get_text("btn_select_ai", en_user)
    
    assert "–í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å" in ru_text
    assert "Select AI" in en_text
    
    print(f"RU: {ru_text}")
    print(f"EN: {en_text}")
    
    # –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    ru_text_with_params = get_text("btn_pay_card", ru_user, amount=100)
    en_text_with_params = get_text("btn_pay_card", en_user, amount=100)
    
    assert "100‚ÇΩ" in ru_text_with_params
    assert "100‚ÇΩ" in en_text_with_params
    
    print(f"RU with params: {ru_text_with_params}")
    print(f"EN with params: {en_text_with_params}")
    
    # –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    ru_long_text = get_text("subs_text", ru_user, model_name="GPT-4")
    en_long_text = get_text("subs_text", en_user, model_name="GPT-4")
    
    assert "GPT-4" in ru_long_text
    assert "GPT-4" in en_long_text
    
    print(f"RU long text: {ru_long_text[:50]}...")
    print(f"EN long text: {en_long_text[:50]}...")
    
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_all_buttons():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    print("\n=== –¢–µ—Å—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ ===")
    
    ru_user = User(id=1, is_bot=False, first_name="Test", language_code="ru")
    en_user = User(id=2, is_bot=False, first_name="Test", language_code="en")
    
    button_keys = [
        "btn_select_ai", "btn_select_role", "btn_buy_subs", "btn_trial_3_days",
        "btn_profile", "btn_support", "btn_back", "btn_main_menu",
        "btn_edit_roles", "btn_create_role", "btn_delete_role", "btn_settings_subs",
        "btn_free_tokens", "btn_stop_renew", "btn_start_renew", "btn_extend_subs",
        "btn_cancel", "btn_pay_card", "btn_pay_stars", "btn_oferta", "btn_pay_1_rub"
    ]
    
    missing_keys = []
    
    for key in button_keys:
        try:
            ru_text = get_text(key, ru_user)
            en_text = get_text(key, en_user)
            
            if not ru_text or ru_text == key:
                missing_keys.append(f"RU: {key}")
            if not en_text or en_text == key:
                missing_keys.append(f"EN: {key}")
                
        except Exception as e:
            missing_keys.append(f"Error for {key}: {e}")
    
    if missing_keys:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã:")
        for key in missing_keys:
            print(f"  - {key}")
    else:
        print("‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    return len(missing_keys) == 0


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n")
    
    try:
        test_language_detection()
        test_text_retrieval()
        all_buttons_ok = test_all_buttons()
        
        print(f"\nüéâ –¢–µ—Å—Ç {'–ø—Ä–æ–π–¥–µ–Ω' if all_buttons_ok else '–∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏'}!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
